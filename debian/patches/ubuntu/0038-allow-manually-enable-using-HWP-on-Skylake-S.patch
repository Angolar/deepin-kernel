commit 8aba0d67821a4f314a6929b4e09a37237affcc33
Author: Yang Bo <yangbo@linuxdeepin.com>
Date:   Sun Jan 3 20:29:50 2016 +0800

    UBUNTU: SAUCE: intel_pstate: Allow manually forcing the use of HWP on Skylake-S
    
    Not being upstreamed. Skylake issues should be solved by 16.04
    
    HWP is currently disabled by default for Skylake-S processors
    because some systems experience a hard lockup when using it.
    This patch allows for the user to force the use of HWP anyway by
    passing the "intel_pstate.skylake_hwp" parameter to the kernel
    if he/she knows the system will not be affected by the lockup.
    
    Signed-off-by: Michael Marley <michael@michaelmarley.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
    Signed-off-by: Yang Bo <yangbo@linuxdeepin.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 8f0e683..0849e05 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1550,6 +1550,9 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 		hwp_only
 			Only load intel_pstate on systems which support
 			hardware P state control (HWP) if available.
+		skylake_hwp
+			Enable the use of HWP on Skylake-S processors even though
+			it may cause hard lockups on certain systems.
 
 	intremap=	[X86-64, Intel-IOMMU]
 			on	enable Interrupt Remapping (default)
diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 10763bb..91cd569 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -1093,6 +1093,7 @@ static struct cpufreq_driver intel_pstate_driver = {
 static int __initdata no_load;
 static int __initdata no_hwp;
 static int __initdata hwp_only;
+static int __initdata skylake_hwp;
 static unsigned int force_load;
 
 static int intel_pstate_msrs_not_valid(void)
@@ -1277,7 +1278,7 @@ static int __init intel_pstate_init(void)
 		return -ENOMEM;
 
 	if (static_cpu_has_safe(X86_FEATURE_HWP) && !no_hwp
-		&& id->model != 0x5e)
+		&& (id->model != 0x5e || skylake_hwp))
 		hwp_active++;
 
 	if (!hwp_active && hwp_only)
@@ -1319,6 +1320,8 @@ static int __init intel_pstate_setup(char *str)
 		force_load = 1;
 	if (!strcmp(str, "hwp_only"))
 		hwp_only = 1;
+	if (!strcmp(str, "skylake_hwp"))
+		skylake_hwp = 1;
 	return 0;
 }
 early_param("intel_pstate", intel_pstate_setup);
