commit 97186c73a29508fe87ed689b5b7b7145465c34b4
Author: Seth Forshee <seth.forshee@canonical.com>
Date:   Tue Jan 19 13:12:02 2016 -0600

    UBUNTU: SAUCE: overlayfs: Skip permission checking for trusted.overlayfs.* xattrs
    
    The original mounter had CAP_SYS_ADMIN in the user namespace
    where the mount happened, and the vfs has validated that the user
    has permission to do the requested operation. This is sufficient
    for allowing the kernel to write these specific xattrs, so we can
    bypass the permission checks for these xattrs.
    
    To support this, export __vfs_setxattr_noperm and add an similar
    __vfs_removexattr_noperm which is also exported. Use these when
    setting or removing trusted.overlayfs.* xattrs.
    
    BugLink: http://bugs.launchpad.net/bugs/1531747
    BugLink: http://bugs.launchpad.net/bugs/1534961
    BugLink: http://bugs.launchpad.net/bugs/1535150
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>

diff --git a/fs/overlayfs/overlayfs.h b/fs/overlayfs/overlayfs.h
index 5813ccf..991dd57 100644
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@ -95,7 +95,13 @@ static inline int ovl_do_symlink(struct inode *dir, struct dentry *dentry,
 static inline int ovl_do_setxattr(struct dentry *dentry, const char *name,
 				  const void *value, size_t size, int flags)
 {
-	int err = vfs_setxattr(dentry, name, value, size, flags);
+	struct inode *inode = dentry->d_inode;
+	int err;
+
+	inode_lock(inode);
+	err = __vfs_setxattr_noperm(dentry, name, value, size, flags);
+	inode_unlock(inode);
+
 	pr_debug("setxattr(%pd2, \"%s\", \"%*s\", 0x%x) = %i\n",
 		 dentry, name, (int) size, (char *) value, flags, err);
 	return err;
@@ -103,7 +109,13 @@ static inline int ovl_do_setxattr(struct dentry *dentry, const char *name,
 
 static inline int ovl_do_removexattr(struct dentry *dentry, const char *name)
 {
-	int err = vfs_removexattr(dentry, name);
+	struct inode *inode = dentry->d_inode;
+	int err;
+
+	inode_lock(inode);
+	err = __vfs_removexattr_noperm(dentry, name);
+	inode_unlock(inode);
+
 	pr_debug("removexattr(%pd2, \"%s\") = %i\n", dentry, name, err);
 	return err;
 }
diff --git a/fs/xattr.c b/fs/xattr.c
index b60dc60..9bdb9f1 100644
--- a/fs/xattr.c
+++ b/fs/xattr.c
@@ -123,6 +123,7 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 
 	return error;
 }
+EXPORT_SYMBOL_GPL(__vfs_setxattr_noperm);
 
 
 int
@@ -272,15 +273,42 @@ vfs_listxattr(struct dentry *d, char *list, size_t size)
 }
 EXPORT_SYMBOL_GPL(vfs_listxattr);
 
+/**
+ *  __vfs_removexattr_noperm - perform removexattr operation without
+ *  performing permission checks.
+ *
+ *  @dentry - object to perform setxattr on
+ *  @name - xattr name to set
+ *
+ *  returns the result of the internal setxattr or setsecurity operations.
+ *
+ *  This function requires the caller to lock the inode's i_mutex before it
+ *  is executed. It also assumes that the caller will make the appropriate
+ *  permission checks.
+ */
+int __vfs_removexattr_noperm(struct dentry *dentry, const char *name)
+{
+	struct inode *inode = dentry->d_inode;
+	int error = -EOPNOTSUPP;
+
+	if (inode->i_op->removexattr) {
+		error = inode->i_op->removexattr(dentry, name);
+		if (!error) {
+			fsnotify_xattr(dentry);
+			evm_inode_post_removexattr(dentry, name);
+		}
+	}
+
+	return error;
+}
+EXPORT_SYMBOL_GPL(__vfs_removexattr_noperm);
+
 int
 vfs_removexattr(struct dentry *dentry, const char *name)
 {
 	struct inode *inode = dentry->d_inode;
 	int error;
 
-	if (!inode->i_op->removexattr)
-		return -EOPNOTSUPP;
-
 	error = xattr_permission(inode, name, MAY_WRITE);
 	if (error)
 		return error;
@@ -290,12 +318,7 @@ vfs_removexattr(struct dentry *dentry, const char *name)
 	if (error)
 		goto out;
 
-	error = inode->i_op->removexattr(dentry, name);
-
-	if (!error) {
-		fsnotify_xattr(dentry);
-		evm_inode_post_removexattr(dentry, name);
-	}
+	error = __vfs_removexattr_noperm(dentry, name);
 
 out:
 	inode_unlock(inode);
diff --git a/include/linux/xattr.h b/include/linux/xattr.h
index 94079ba..dcf073b 100644
--- a/include/linux/xattr.h
+++ b/include/linux/xattr.h
@@ -50,6 +50,7 @@ ssize_t vfs_getxattr(struct dentry *, const char *, void *, size_t);
 ssize_t vfs_listxattr(struct dentry *d, char *list, size_t size);
 int __vfs_setxattr_noperm(struct dentry *, const char *, const void *, size_t, int);
 int vfs_setxattr(struct dentry *, const char *, const void *, size_t, int);
+int __vfs_removexattr_noperm(struct dentry *dentry, const char *name);
 int vfs_removexattr(struct dentry *, const char *);
 
 ssize_t generic_getxattr(struct dentry *dentry, struct inode *inode, const char *name, void *buffer, size_t size);
