commit 4c80583c7a249659008f14623c56bc89071fc06b
Author: Seth Forshee <seth.forshee@canonical.com>
Date:   Wed Aug 24 11:47:05 2016 -0500

    UBUNTU: SAUCE: (namespace) fuse: Translate ids in posix acl xattrs
    
    Fuse currently lacks comprehensive support for posix ACLs, but
    some fuse filesystems process the acl xattrs internally. For this
    to continue to work the ids within the xattrs need to be mapped
    into s_user_ns when written to the filesystem and mapped from
    s_user_ns when read.
    
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/fs/fuse/dir.c b/fs/fuse/dir.c
index a49d0b5..2a74a07 100644
--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -13,6 +13,8 @@
 #include <linux/sched.h>
 #include <linux/namei.h>
 #include <linux/slab.h>
+#include <uapi/linux/xattr.h>
+#include <linux/posix_acl_xattr.h>
 
 static bool fuse_use_readdirplus(struct inode *dir, struct dir_context *ctx)
 {
@@ -1762,12 +1764,24 @@ static int fuse_setxattr(struct dentry *unused, struct inode *inode,
 {
 	struct fuse_conn *fc = get_fuse_conn(inode);
 	FUSE_ARGS(args);
+	void *buf = NULL;
 	struct fuse_setxattr_in inarg;
 	int err;
 
 	if (fc->no_setxattr)
 		return -EOPNOTSUPP;
 
+	if (!strcmp(name, XATTR_NAME_POSIX_ACL_ACCESS) ||
+	    !strcmp(name, XATTR_NAME_POSIX_ACL_DEFAULT)) {
+		buf = kmemdup(value, size, GFP_KERNEL);
+		if (!buf)
+			return -ENOMEM;
+		err = posix_acl_fix_xattr_userns(inode->i_sb->s_user_ns,
+						 &init_user_ns, buf, size);
+		if (err)
+			goto out;
+	}
+
 	memset(&inarg, 0, sizeof(inarg));
 	inarg.size = size;
 	inarg.flags = flags;
@@ -1779,7 +1793,7 @@ static int fuse_setxattr(struct dentry *unused, struct inode *inode,
 	args.in.args[1].size = strlen(name) + 1;
 	args.in.args[1].value = name;
 	args.in.args[2].size = size;
-	args.in.args[2].value = value;
+	args.in.args[2].value = buf ? buf : value;
 	err = fuse_simple_request(fc, &args);
 	if (err == -ENOSYS) {
 		fc->no_setxattr = 1;
@@ -1789,6 +1803,8 @@ static int fuse_setxattr(struct dentry *unused, struct inode *inode,
 		fuse_invalidate_attr(inode);
 		fuse_update_ctime(inode);
 	}
+out:
+	kfree(buf);
 	return err;
 }
 
@@ -1824,8 +1840,16 @@ static ssize_t fuse_getxattr(struct dentry *entry, struct inode *inode,
 		args.out.args[0].value = &outarg;
 	}
 	ret = fuse_simple_request(fc, &args);
-	if (!ret && !size)
-		ret = outarg.size;
+	if (!ret) {
+		if (!size) {
+			ret = outarg.size;
+		} else if (!strcmp(name, XATTR_NAME_POSIX_ACL_ACCESS) ||
+			   !strcmp(name, XATTR_NAME_POSIX_ACL_DEFAULT)) {
+			ret = posix_acl_fix_xattr_userns(&init_user_ns,
+							 inode->i_sb->s_user_ns,
+							 value, size);
+		}
+	}
 	if (ret == -ENOSYS) {
 		fc->no_getxattr = 1;
 		ret = -EOPNOTSUPP;
