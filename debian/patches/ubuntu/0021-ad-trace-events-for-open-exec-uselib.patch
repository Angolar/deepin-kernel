commit af58eea9f39e2a083a3c4d3a95abe973b34a7e6a
Author: Yang Bo <yangbo@linuxdeepin.com>
Date:   Sun Jan 3 19:42:41 2016 +0800

    UBUNTU: SAUCE: (no-up) trace: add trace events for open(), exec() and uselib() (for v3.7+)
    
    BugLink: http://bugs.launchpad.net/bugs/462111
    
    This patch uses TRACE_EVENT to add tracepoints for the open(),
    exec() and uselib() syscalls so that ureadahead can cheaply trace
    the boot sequence to determine what to read to speed up the next.
    
    It's not upstream because it will need to be rebased onto the syscall
    trace events whenever that gets merged, and is a stop-gap.
    
    [apw@canonical.com: updated for v3.7 and later.]
    [apw@canonical.com: updated for v3.19 and later.]
    BugLink: http://bugs.launchpad.net/bugs/1085766
    Signed-off-by: Scott James Remnant <scott@ubuntu.com>
    Acked-by: Stefan Bader <stefan.bader@canonical.com>
    Acked-by: Andy Whitcroft <andy.whitcroft@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
    
    Conflicts:
    
    	fs/open.c
    
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
    Signed-off-by: Yang Bo <yangbo@linuxdeepin.com>

diff --git a/fs/exec.c b/fs/exec.c
index 3526d30..4fc262a 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -57,6 +57,8 @@
 #include <linux/oom.h>
 #include <linux/compat.h>
 
+#include <trace/events/fs.h>
+
 #include <asm/uaccess.h>
 #include <asm/mmu_context.h>
 #include <asm/tlb.h>
@@ -794,6 +796,8 @@ static struct file *do_open_execat(int fd, struct filename *name, int flags)
 	if (name->name[0] != '\0')
 		fsnotify_open(file);
 
+	trace_open_exec(name->name);
+
 out:
 	return file;
 
diff --git a/fs/open.c b/fs/open.c
index e59c51b..32dfe4f 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -34,6 +34,9 @@
 
 #include "internal.h"
 
+#define CREATE_TRACE_POINTS
+#include <trace/events/fs.h>
+
 int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
 	struct file *filp)
 {
@@ -1031,6 +1034,7 @@ long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
 		} else {
 			fsnotify_open(f);
 			fd_install(fd, f);
+			trace_do_sys_open(tmp->name, flags, mode);
 		}
 	}
 	putname(tmp);
