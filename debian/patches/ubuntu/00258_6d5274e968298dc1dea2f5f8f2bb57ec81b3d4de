commit 6d5274e968298dc1dea2f5f8f2bb57ec81b3d4de
Author: Yang Bo <yangbo@deepin.com>
Date:   Fri Nov 17 16:16:41 2017 +0800

    UBUNTU: SAUCE: overlayfs: Propogate nosuid from lower and upper mounts
    
    An overlayfs mount using an upper or lower directory from a
    nosuid filesystem bypasses this restriction. Change this so
    that if any lower or upper directory is nosuid at mount time the
    overlayfs superblock is marked nosuid. This requires some
    additions at the vfs level since nosuid currently only applies to
    mounts, so a SB_I_NOSUID flag is added along with a helper
    function to check a path for nosuid in both the mount and the
    superblock.
    
    BugLink: http://bugs.launchpad.net/bugs/1534961
    BugLink: http://bugs.launchpad.net/bugs/1535150
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>
    Signed-off-by: Yang Bo <yangbo@deepin.com>

diff --git a/fs/exec.c b/fs/exec.c
index 2bb3f3668..d308df45a 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -113,6 +113,13 @@ bool path_noexec(const struct path *path)
 }
 EXPORT_SYMBOL_GPL(path_noexec);
 
+bool path_nosuid(const struct path *path)
+{
+	return !mnt_may_suid(path->mnt) ||
+	       (path->mnt->mnt_sb->s_iflags & SB_I_NOSUID);
+}
+EXPORT_SYMBOL(path_nosuid);
+
 #ifdef CONFIG_USELIB
 /*
  * Note that a shared library must be both readable and executable due to
@@ -1517,7 +1524,7 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
 	bprm->cred->euid = current_euid();
 	bprm->cred->egid = current_egid();
 
-	if (!mnt_may_suid(bprm->file->f_path.mnt))
+	if (path_nosuid(&bprm->file->f_path))
 		return;
 
 	if (task_no_new_privs(current))
diff --git a/fs/overlayfs/super.c b/fs/overlayfs/super.c
index 08218e810..e1ad037c8 100644
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@ -973,6 +973,9 @@ static int ovl_fill_super(struct super_block *sb, void *data, int silent)
 
 		sb->s_time_gran = ufs->upper_mnt->mnt_sb->s_time_gran;
 
+		if (ufs->upper_mnt->mnt_flags & MNT_NOSUID)
+			sb->s_iflags |= SB_I_NOSUID;
+
 		ufs->workdir = ovl_workdir_create(sb, ufs, workpath.dentry,
 						  OVL_WORKDIR_NAME, false);
 		/*
@@ -1044,6 +1047,9 @@ static int ovl_fill_super(struct super_block *sb, void *data, int silent)
 		 */
 		mnt->mnt_flags |= MNT_READONLY | MNT_NOATIME;
 
+		if (mnt->mnt_flags & MNT_NOSUID)
+			sb->s_iflags |= SB_I_NOSUID;
+
 		ufs->lower_mnt[ufs->numlower] = mnt;
 		ufs->numlower++;
 
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 4a32a65e1..44de4ecdf 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1313,6 +1313,7 @@ extern int send_sigurg(struct fown_struct *fown);
 #define SB_I_CGROUPWB	0x00000001	/* cgroup-aware writeback enabled */
 #define SB_I_NOEXEC	0x00000002	/* Ignore executables on this fs */
 #define SB_I_NODEV	0x00000004	/* Ignore devices on this fs */
+#define SB_I_NOSUID	0x00000008	/* Ignore suid on this fs */
 
 /* sb->s_iflags to limit user namespace mounts */
 #define SB_I_USERNS_VISIBLE		0x00000010 /* fstype already mounted */
@@ -3384,6 +3385,7 @@ static inline bool dir_relax_shared(struct inode *inode)
 }
 
 extern bool path_noexec(const struct path *path);
+extern bool path_nosuid(const struct path *path);
 extern void inode_nohighmem(struct inode *inode);
 
 #endif /* _LINUX_FS_H */
diff --git a/security/commoncap.c b/security/commoncap.c
index d493ec3d3..d779753cd 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -663,7 +663,7 @@ static int get_file_caps(struct linux_binprm *bprm, bool *effective, bool *has_c
 	if (!file_caps_enabled)
 		return 0;
 
-	if (!mnt_may_suid(bprm->file->f_path.mnt))
+	if (path_nosuid(&bprm->file->f_path))
 		return 0;
 
 	/*
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 44b329748..8d9a9556a 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -2271,7 +2271,7 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 			    const struct task_security_struct *new_tsec)
 {
 	int nnp = (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS);
-	int nosuid = !mnt_may_suid(bprm->file->f_path.mnt);
+	int nosuid = path_nosuid(&bprm->file->f_path);
 	int rc;
 	u32 av;
 
